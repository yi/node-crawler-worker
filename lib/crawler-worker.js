// Generated by CoffeeScript 1.6.3
(function() {
  var LocalRedisClient, fs, jobs, kue, logger, mkdirp, p, path, redis, _;

  _ = require("underscore");

  p = require("commander");

  kue = require('kue');

  redis = require('redis');

  logger = require('dev-logger');

  fs = require("fs");

  path = require("path");

  mkdirp = require("mkdirp");

  p.version('0.0.1').option('-p, --port', 'redis server port').option('-h, --host [VALUE]', 'redis server host').option('-g, --gameserver-id [VALUE]', 'game server id, for which this crawler is working').option('-o, --output [PATH]', 'file output path').parse(process.argv);

  p.port = parseInt(p.port) || 6379;

  p.host = p.host || "localhost";

  logger.isDebug = true;

  if (!(_.isString(p.gameserverId) && p.gameserverId.length > 0)) {
    console.error("ERROR [crawler-worker::init] missing server id");
    process.exit(1);
    return;
  }

  if (!fs.existsSync(p.output)) {
    console.error("ERROR [crawler-worker::init] non-exist output path (-o):" + p.output);
    process.exit(1);
    return;
  }

  kue.redis.createClient = function() {
    var client;
    client = redis.createClient(p.port, p.host);
    return client;
  };

  jobs = kue.createQueue();

  LocalRedisClient = redis.createClient(p.port, p.host);

  jobs.process("" + p.ameserverId + "-mars-data", function(job, done) {
    var SET_DATA, data, guid, name, score;
    logger.log("[crawler-worker::on::mars-data]");
    data = job.data;
    guid = parseInt(data.guid);
    name = data.name;
    score = data.score;
    if (!((guid != null) && isNaN(guid) && guid > 0)) {
      logger.error("[crawler-worker::on::mars-data] mars guid:" + guid + " name:" + name + " score:" + score);
      done("mars guid is errorã€‚guid:" + guid);
      return;
    }
    SET_DATA = ['mars', 'new_id', guid, 'new_name', name, 'new_js', score];
    if (LocalRedisClient != null) {
      return LocalRedisClient.HMSET(SET_DATA, function(err) {
        if (err != null) {
          logger.error("[crawler-worker::on::mars-data] set redis mars data is error:" + err);
        }
        done();
        job.remove(function(error) {
          return logger.warn("[crawler-worker::on::mars-data] " + error);
        });
      });
    }
  });

  jobs.process("" + p.gameserverId + "-write-html", function(job, done) {
    var content, data, err, filename, outputPath, subpath;
    console.log("[crawler-worker::on::write-html]");
    data = job.data;
    subpath = data.subpath;
    filename = data.filename;
    content = data.content;
    if (!(_.isString(filename) && filename.length > 0)) {
      err = "bad job.filename: " + filename;
      logger.warn("[crawler-worker::on::write-html] " + err);
      done(err);
      return;
    }
    if (!(_.isString(content) && content.length > 0)) {
      err = "bad job.content: " + content;
      logger.warn("[crawler-worker::on::write-html] " + err);
      done(err);
      return;
    }
    if (subpath != null) {
      outputPath = path.join(p.output, subpath);
      try {
        mkdirp.sync(outputPath);
      } catch (_error) {
        err = _error;
        err = "fail to create directory. error:" + err;
        logger.warn("[crawler-worker::on::write-html] " + err);
        done(err);
        return;
      }
    }
    outputPath = path.join(outputPath || p.output, filename);
    console.log("[crawler-worker::on::write-html] write to " + outputPath);
    return fs.writeFile(outputPath, content, function(err) {
      if (err != null) {
        err = "fail to write content, error:" + err;
        logger.warn("[crawler-worker::on::write-html] " + err);
        done(err);
        return;
      }
      done();
      job.remove(function(err) {
        if (err != null) {
          return logger.warn("[crawler-worker::on::write-html] " + err);
        }
      });
    });
  });

  console.log("======================== Starting NovaCrawler::Worker ========================");

  console.log("Listen to: " + p.host + ":" + p.port + ", games server id:" + p.gameserverId + ", base output to:" + p.output);

}).call(this);
